org: adrianpersonal3
app: catholic-church-finder
service: backend

custom:
  userPoolId:       us-west-1_NNGeSDxTP
  appClientId:      32bvrqma8qafn20tj6ki325grc
  userPoolRegion:   us-west-1

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2

  httpApi:
    cors: true
    authorizers:
      cognitoAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:custom.userPoolRegion}.amazonaws.com/${self:custom.userPoolId}
        audience:
          - 32bvrqma8qafn20tj6ki325grc
          - 35eiafke5u59ldmupuo8j0j522

  environment:
    VISITS_TABLE:          ${self:service}-Visits
    VISIT_IMAGES_BUCKET:   ${self:service}-visit-images
    DEBUG_IMAGE_URLS:      '1'
    FRIENDS_TABLE:         ${self:service}-Friends
    PROFILES_TABLE:        ${self:service}-Profiles
    FRIEND_REQUESTS_TABLE: ${self:service}-FriendRequests
    USER_POOL_ID:          ${self:custom.userPoolId}
    USER_POOL_REGION:      ${self:custom.userPoolRegion}

  iam:
    role:
      statements:
        # DynamoDB
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:TransactWriteItems
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-Visits
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-Friends
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-Profiles
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-FriendRequests
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-FriendRequests/index/requesterIndex
        # S3 (signed upload & reads)
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource:
            - arn:aws:s3:::${self:service}-visit-images/*
        # Cognito (validate friend codes)
        - Effect: Allow
          Action:
            - cognito-idp:ListUsers
          Resource: "*"

functions:
  listVisits:
    handler: handler.listVisits
    events:
      - httpApi:
          path: /visits
          method: GET
          authorizer: cognitoAuthorizer

  getVisit:
    handler: handler.getVisit
    events:
      - httpApi:
          path: /visits/{placeId}
          method: GET
          authorizer: cognitoAuthorizer

  upsertVisit:
    handler: handler.upsertVisit
    events:
      - httpApi:
          path: /visits/{placeId}
          method: POST
          authorizer: cognitoAuthorizer

  deleteVisit:
    handler: handler.deleteVisit
    events:
      - httpApi:
          path: /visits/{placeId}
          method: DELETE
          authorizer: cognitoAuthorizer

  getUploadUrl:
    handler: handler.getUploadUrl
    events:
      - httpApi:
          path: /visits/{placeId}/upload-url
          method: GET
          authorizer: cognitoAuthorizer

  getImageUrls:
    handler: handler.getImageUrls
    events:
      - httpApi:
          path: /visits/{placeId}/images
          method: GET
          authorizer: cognitoAuthorizer

  getMe:
    handler: handler.getMe
    events:
      - httpApi:
          path: /me
          method: GET
          authorizer: cognitoAuthorizer

  updateProfile:
    handler: handler.updateProfile
    events:
      - httpApi:
          path: /profile
          method: POST
          authorizer: cognitoAuthorizer

  addFriend:
    handler: handler.addFriend
    events:
      - httpApi:
          path: /friends/{friendId}
          method: POST
          authorizer: cognitoAuthorizer

  listFriends:
    handler: handler.listFriends
    events:
      - httpApi:
          path: /friends
          method: GET
          authorizer: cognitoAuthorizer

  removeFriend:
    handler: handler.removeFriend
    events:
      - httpApi:
          path: /friends/{friendId}
          method: DELETE
          authorizer: cognitoAuthorizer

  friendsSummary:
    handler: handler.friendsSummary
    events:
      - httpApi:
          path: /friends/summary
          method: GET
          authorizer: cognitoAuthorizer

  getFriendVisits:
    handler: handler.getFriendVisits
    events:
      - httpApi:
          path: /friends/{friendId}/visits
          method: GET
          authorizer: cognitoAuthorizer

  requestFriend:
    handler: handler.requestFriend
    events:
      - httpApi:
          path: /friends/requests/{targetUserId}
          method: POST
          authorizer: cognitoAuthorizer

  listIncomingRequests:
    handler: handler.listIncomingRequests
    events:
      - httpApi:
          path: /friends/requests/incoming
          method: GET
          authorizer: cognitoAuthorizer

  listOutgoingRequests:
    handler: handler.listOutgoingRequests
    events:
      - httpApi:
          path: /friends/requests/outgoing
          method: GET
          authorizer: cognitoAuthorizer

  acceptFriendRequest:
    handler: handler.acceptFriendRequest
    events:
      - httpApi:
          path: /friends/requests/{requesterUserId}/accept
          method: POST
          authorizer: cognitoAuthorizer

  declineFriendRequest:
    handler: handler.declineFriendRequest
    events:
      - httpApi:
          path: /friends/requests/{requesterUserId}/decline
          method: POST
          authorizer: cognitoAuthorizer

resources:
  Resources:
    VisitsDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-Visits
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: placeId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: placeId
            KeyType: RANGE

    VisitImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-visit-images
        CorsConfiguration:
          CorsRules:
            - AllowedMethods: [ GET, PUT ]
              AllowedOrigins: [ '*' ]
              AllowedHeaders: [ '*' ]

    FriendsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-Friends
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: friendId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: friendId
            KeyType: RANGE

    ProfilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-Profiles
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH

    FriendRequestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-FriendRequests
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: targetUserId
            AttributeType: S
          - AttributeName: requesterUserId
            AttributeType: S
        KeySchema:
          - AttributeName: targetUserId
            KeyType: HASH
          - AttributeName: requesterUserId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: requesterIndex
            KeySchema:
              - AttributeName: requesterUserId
                KeyType: HASH
              - AttributeName: targetUserId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
