org: adrianpersonal3
app: catholic-church-finder
service: backend

custom:
  userPoolId:    us-west-1_NNGeSDxTP        # ← your Cognito User Pool ID
  appClientId:   32bvrqma8qafn20tj6ki325grc # ← your Cognito App Client ID
  userPoolRegion: us-west-1

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2

  httpApi:
    cors: true
    authorizers:
      cognitoAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: >-
          https://cognito-idp.${self:custom.userPoolRegion}.amazonaws.com/${self:custom.userPoolId}

        audience:
          - 32bvrqma8qafn20tj6ki325grc
          - 35eiafke5u59ldmupuo8j0j522

  environment:
    VISITS_TABLE:       ${self:service}-Visits
    VISIT_IMAGES_BUCKET: ${self:service}-visit-images
    DEBUG_IMAGE_URLS: '1'

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-Visits
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource:
            - arn:aws:s3:::${self:service}-visit-images/*

  iam:
    role:
      statements:
        - Effect: Allow
          Action: [ dynamodb:Query, dynamodb:GetItem, dynamodb:PutItem, dynamodb:UpdateItem ]
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-Friends
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-Profiles
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-Visits

functions:
  listVisits:
    handler: handler.listVisits
    events:
      - httpApi:
          path: /visits
          method: GET
          authorizer: cognitoAuthorizer

  getVisit:
    handler: handler.getVisit
    events:
      - httpApi:
          path: /visits/{placeId}
          method: GET
          authorizer: cognitoAuthorizer

  upsertVisit:
    handler: handler.upsertVisit
    events:
      - httpApi:
          path: /visits/{placeId}
          method: POST
          authorizer: cognitoAuthorizer

  getUploadUrl:
    handler: handler.getUploadUrl
    events:
      - httpApi:
          path: /visits/{placeId}/upload-url
          method: GET
          authorizer: cognitoAuthorizer
  
  getImageUrls:
    handler: handler.getImageUrls
    events:
      - httpApi:
          path: /visits/{placeId}/images
          method: GET
          authorizer: cognitoAuthorizer

  getMe:
    handler: handler.getMe
    events:
      - httpApi:
          path: /me
          method: GET
          authorizer: cognitoAuthorizer

  updateProfile:
    handler: handler.updateProfile
    events:
      - httpApi:
          path: /profile
          method: POST
          authorizer: cognitoAuthorizer

  addFriend:
    handler: handler.addFriend
    events:
      - httpApi:
          path: /friends/{friendId}
          method: POST
          authorizer: cognitoAuthorizer

  listFriends:
    handler: handler.listFriends
    events:
      - httpApi:
          path: /friends
          method: GET
          authorizer: cognitoAuthorizer

  friendsSummary:
    handler: handler.friendsSummary
    events:
      - httpApi:
          path: /friends/summary
          method: GET
          authorizer: cognitoAuthorizer

  getFriendVisits:
    handler: handler.getFriendVisits
    events:
      - httpApi:
          path: /friends/{friendId}/visits
          method: GET
          authorizer: cognitoAuthorizer

resources:
  Resources:
    VisitsDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-Visits
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: placeId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: placeId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    VisitImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-visit-images
        CorsConfiguration:
          CorsRules:
            - AllowedMethods: [ GET, PUT ]
              AllowedOrigins: [ '*' ]
              AllowedHeaders: [ '*' ]
    
    FriendsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-Friends
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: friendId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: friendId
            KeyType: RANGE

    ProfilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-Profiles
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH

